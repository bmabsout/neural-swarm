{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE UndecidableInstances #-}
module Boids(Boids,boidsNeuralInstance) where

import           Brain
import           Control.Lens
import           Convenience
import           Data.Bifunctor
import           Data.List
import qualified Data.Vector.Storable as V
import           Graphics.Gloss
import           GHC.TypeLits
import           Data.Proxy
import           Minimizer
import           Numeric.FastMath()
import           Simulator
import           Data.KdMap.Static hiding (size)
import qualified Control.Monad.Random as R

type Doubles = Vec Double

type Updater (n::Nat) = Doubles -> Sized n (Doubles,Doubles) -> Doubles

data Boids neighbhors =
  Boids {
    _moves         :: ![(Doubles,Doubles)],
    _goal          :: !(Doubles,Double),
    _numBumps      :: !Double,
    _size          :: !Int,
    _updater       :: Updater neighbhors
  }
makeLenses ''Boids

numNeighbhors :: forall n x. _ => Boids n -> x
numNeighbhors _ = typeNum (Proxy :: Proxy n)


boidSize :: RealFloat s => s
boidSize = 8

instance CanRender (Boids 4) where
  simRender boids =
      boids^.moves &> (\(p,_) -> circleSolid boidSize & vecTranslate p
                                                      & color white)
                   & ((:) (circleSolid (boidSize*2) & vecTranslate (computeGoal (boids^.goal))
                                                    & color red))
                   & pictures
      where vecTranslate (Vec (x,y)) = translate (realToFrac x) (realToFrac y)

instance Steppable (Boids 4) where
  simStep boids@(Boids moves goal@(loc,angle) numBumps size updater) =
      Boids newMoves (loc,angle+0.06) newNumBumps size updater
    where
      (newMoves, newNumBumps) = moves &> update & unzip & second (sum &. (+numBumps))
      kdm = buildWithDist vecToList distsq moves
      update (pos,vel) = ((pos+vel,updater (computeGoal goal) nClosest), numCollisions)
        where
          numCollisions = (inRadius kdm boidSize pos & length & fromIntegral) - 1
          nClosest = kNearest kdm (numNeighbhors boids) pos & fromList

instance HasCost (Boids 4) where
  simCost boids = closenessCost + 0.001*boids^.numBumps
    where closenessCost = boids^.moves &> fst
                                       &> distsq (computeGoal (boids^.goal))
                                       & sum
                                       & (/ fromIntegral (boids^.size))

instance Default (Boids 4) where
  auto = R.evalRand (randBoids (10,15) (applyBeforeBox stupidBox neuralUpdater) False) (R.mkStdGen 23423)

computeGoal :: (Doubles, Double) -> Doubles
computeGoal (loc, angle) = rotateVec (fromScalar 400) angle + loc

randBoids :: (Double,Double) -> Updater n -> Bool -> R.Rand _ (Boids n)
randBoids numBoidsRange updater singleLine =
  do
    numBoids <- R.getRandomR numBoidsRange
    goal <- getRandomVec (-1000,1000)
    let size = floor numBoids
    moves <- getRandomVecs (-200,200) &> take size
    return $ Boids (addVelocities $ if singleLine then oneLine numBoids else moves) (goal,0) 0 size updater
  where oneLine :: Double -> [Doubles]
        oneLine numBoids = zip (iterate (+16) (-numBoids*8)) (repeat 0) &> Vec
        addVelocities :: [Doubles] -> [(Doubles,Doubles)]
        addVelocities l = l &> (\x -> (x, Vec (0,0)))


myUpdater :: _ => Updater (n+1)
myUpdater goal poss =
  meV * friction + (them &> fst &. flip gravity meP & ssum)*0.7 +
  8*(let grav = gravity meP goal in lerp (-grav) grav (fromScalar (dist meP goal / 230)))
    where (meP,meV) = shead poss
          friction = 0.7
          them = stail poss
          gravity a b = (b-a) / fromScalar (max ((0.05*dist b a)^^(3::Int)) 10)


boidsNeuralInstance :: NeuralSim (Boids 4) _ _
boidsNeuralInstance = NeuralSim auto boxWeights restorer randTrainingState neuralStep
  where
    currentBox@(brain,boxWeights,restorer) = stupidBox
    neuralStep boids weights = simStep (boids & updater .~ (neuralUpdater brain weights))
    randTrainingState weights =
      randBoids (7,10) (neuralUpdater brain weights) False

neuralUpdater :: Brain (n*4+2) 2 w -> Weights w -> Updater n
neuralUpdater (Brain feed) weights goal poss = feed weights cleanedInputs & sizedToVec
  where
    cleanedInputs = goal & vecToSized & joinSized (poss &> moveToSized & sconcat)
    vecToSized :: Vec a -> Sized 2 a
    vecToSized (Vec (a,b)) = Sized [a,b]
    moveToSized :: (Vec a,Vec a) -> Sized 4 a
    moveToSized (Vec (a,b),Vec (c,d)) = Sized [a,b,c,d]
    sizedToVec :: (Num a) => Sized 2 a -> Vec a
    sizedToVec (Sized [a,b]) = Vec (lerp -40 40 a,lerp -40 40 b)


complexerBox :: _ => BrainBox _ _ _ _
complexerBox = buildBrain (initBrain complexerTrained #> (biased @2 @2 >< shared inputizer)
                                                      #> (biased @4)
                                                      #> (biased @2))
  where inputizer = (biased @4 @2 \> biased @1)

complexerTrained :: Weights 77
complexerTrained = mkN 1.740308366769931 0.4489899455805406 0.843114109910376 1.5765720511813548 0.8600503986622832 3.6726697193739657 0.5531080237513899 -3.6906807654229974 -2.3918632934709194 6.18751291864581 -2.6644412497887355 -1.818902904743382 0.25793144349053465 3.999990104023553 -3.414267379061891 -1.149359858697653 -1.8537102678473611 6.360907368529151 -1.8193422195724072 1.6083224663776385 4.657707438704508 3.0411951017063545 0.3856070922259336 2.6572386621023885 -0.9659749863294873 -0.19223061038293032 1.8206691110057944 0.5186002039274042 1.8416653935449707 1.7078614367171325 1.0741170188832396 0.41726279831275703 2.322572339122291 1.2453988532976266 0.18797933506476755 -3.739870322004672e-2 0.7774729633279065 0.2198593255232576 1.5191563536071633 0.5279149960597886 -0.13091983399215584 1.877083920364674 0.41113619791150047 0.1965957034734595 -3.2024743084040325e-2 0.45251680076051015 1.8595339025573816 1.1633395493627847 0.39205218669453656 -3.0093580213403426 0.7663127505073688 -0.6569308610239772 0.9183704860306439 -0.5495254217155556 0.23498427276959477 1.1385205089161543 -0.32565720603297843 1.8961144231639682 0.26280510064692175 -1.5185102177929464 3.5546228518087384 -1.3935282307571333 1.9344949816216976 -0.3471523743639138 0.607172662882226 -1.066086559763617 -0.8419237496690473 -0.15650015969318415 -1.8326214418624769 0.4998948615178427 0.660368057068135 0.925683778639393 -1.9366279478768562 0.4000381211777161 2.974935976162338 -0.37900159549764467 -1.1950835852276516


tinyBox :: _ => BrainBox _ _ _ _
tinyBox = buildBrain (initBrain theSmartOnes #> (biased @2 @2 >< recurrent (biased @2 @10 \> biased @2))
                                                  #> (biased @8)
                                                  #> (biased @2))


theSmartOnes :: _ => Weights _
theSmartOnes = mkN -1.111077882143261 -0.21818835358276234 1.1012771844788838 0.7226631167725721 -0.30003915582286234 0.8428628786931285 1.2273121483171252 5.321565724930079e-2 -7.09303460078779e-2 -2.9864794386693685 1.1800537035864394 -1.2783149277247365 -7.218977649553567e-3 -0.6733980864325866 -0.4777629338233036 1.3269235133453368 0.13374918979764572 -5.155169938345565e-2 -0.2936052472752373 1.1384901633738953 0.17399473309177899 0.8457515104407123 0.7558200680018645 -0.7366662339924972 0.26860560685101276 -0.12203243495216842 -2.0582753206264875e-2 -1.608521225831896 -0.5024594377211262 -2.5660762349716633 -6.0277584942193846e-2 -0.2796414752614744 0.8622671755005233 -1.9926429879849223 -0.7390174848702891 -0.6091209325914082 -0.29215992772063704 1.8103111379791672 -0.7030714804226663 -0.5356705607245555 -0.8375817700936055 -0.2790687537050074 1.1654986007805523 -1.0260611021825543 0.5099389992334624 1.5175989606198068 -0.3015113555488358 2.060362039739065 -0.31332523339683416 -0.9336994246565249 1.241843669251288 -9.874648054130536e-2 -0.5867876126671103 0.4928226349778446 -4.667298775118514e-2 1.0494531814185817 0.9965227198741822 1.517214978586606 1.216096273965377 1.07143561773578 2.4518799223384127 -0.8018716964139707 3.6443434047083008 1.1503798662158222 1.0660003706745789 0.3441316088000378 1.2667692499480383 -0.4688906754455371 0.9865183914685258 -1.9437632732165708 -0.5468647268167943 0.9984117385307103 0.7135796019274527 -1.569697129544147 0.6793138385885888 -0.36182128379324574 -1.1346333069138907 -0.5351209659894642 0.21691415444725004 -1.9297255214370161 -0.6777221036920256 2.1584612817403857 -1.046202355301507 -0.5607795092868597 0.7273053393831241 0.9389610857354085 -0.38877547805022983 0.6253263473271296 0.8241864649904194 -0.992484695541751 0.2611496191475343 -2.110582350639432


stupidBox :: _ => BrainBox _ _ _ _
stupidBox = buildBrain (initBrain iteratively #> biased @4
                                              #> biased @10
                                              #> biased @2)

iteratively :: _ => Weights _
iteratively = mkN 1.1671600473961372 7.038064718321253e-2 -0.5805237600091993 0.49413008257185553 -0.9158520727141118 0.7933061044893239 0.5222053365454756 -0.549089647538788 0.7901604221798662 0.8414336956383951 -0.19590592026691758 0.8949093906442425 0.6465928678173972 -0.22199988727927739 0.1506285706724141 0.7408319367475001 -0.41625266825215923 -1.465451647880395 -0.2482704298155862 -0.42193569473100556 -2.434519068204234e-2 0.6358300728187163 -0.48767871320553446 -0.5900279791096128 0.18567042808870718 4.537643353836009e-2 0.6135348711115749 -0.9629615072285739 0.7090524596880354 1.9011220538274087 1.4521134381252778 0.5782810199090181 -0.10049468466882533 0.820489802928258 1.2631464384403153 -0.17683257808178685 -0.4017874696656362 7.863737463112025e-2 0.13434513786091082 -0.1235690320011753 0.25169501672507777 0.39380726339434347 0.3298417789144977 -1.075075623121489 0.8889359725046548 -2.173109121454287e-2 0.4346237817291515 0.6002796682623345 -7.619765097181368e-2 -0.30920884557932726 0.2161969756625648 0.20505067262878846 0.14436262698498056 -0.5270999365157103 -0.9310790285078391 0.39711022157460196 -1.197114927851803 9.29007751814599e-2 -0.8479318389874582 0.5206317184159422 -0.41202519131942783 0.5166540574071555 -0.3523008571897189 0.8992304362618441 -0.1906836633820745 0.24302033381510818 -0.3914979937415976 6.998166125348408e-2 0.6856584190330003 6.702203545799007e-2 0.4272932382488007 0.6697935315230518 0.8681612199526357 -1.7736463398879816 1.2643304432881846 -0.5256988022967823 -0.5859856533606035 -0.7960660896668458 -0.29381092813485127 1.3553086835021397 0.40198697265434785 -0.33334900773634074 -1.01185753281858 -0.7056987864104053 0.6894547217210917 0.7341988185135022 0.12154039044921265 0.2891974706771035 8.086358227140306e-2 -0.1814145931445157 0.5721974284633914 -1.2945393460649426 0.18721400416584189 0.20093383546970708 1.1574610747126068 0.9436302443249329 -1.0546906630988058 1.1097571070738423 0.5891897771449195 1.2373746464533748 0.38386805415714453 -0.540537965695876 1.0988753607098805 0.46336420675842854 -1.129732776349387 0.18838181253872016 -6.593970609099976e-2 -0.9693428472718318 -0.28229843843091296 4.3576803625550636e-2 -1.031268824425032 0.3240231880270373 -0.622792004150397 -7.850663363436344e-2 -0.4389044444063073 -4.595708646188315e-2 0.8103392267036857 0.2811047595158967 1.2793843273125824 0.10773966156358342 -1.2841299289471415 0.8221312400776452 -0.12676540887601187 0.2698753572327606 7.162979972282363e-2 -1.8587821839215384 0.6975933237708742 0.6122975347395861 1.0659561818594578 -0.2809778534466022 0.46961059786034415 -0.8325377659611375 -0.41543244200320295 0.7465322632122873 0.40424660750897673 -0.9454903842839792 -0.7145448467790558 -0.13773220271348685 -0.8227588029911703 -0.19558463646813842 0.18805898414601713 -0.8246358734452975 -1.1821113797133056 1.354855156363801 0.5581481231992456 0.5457197927717707 0.5463806378578427 -0.4375977628838358
