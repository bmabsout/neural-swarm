{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE NegativeLiterals #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ExistentialQuantification #-}
{-# LANGUAGE PartialTypeSignatures #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE DataKinds #-}
{-# OPTIONS_GHC -freduction-depth=0 #-}
{-# OPTIONS_GHC -fno-warn-partial-type-signatures #-}
module FireFlies
    ( Flies,
      fliesSimulatorInstance,
      fliesNeuralSimInstance
    ) where

import           Control.Lens
import           Graphics.Gloss
import           Data.List
import qualified Data.Vector.Storable as V
import           Numeric.FastMath()
import           Convenience
import           Brain
import           Simulator
import           Minimizer

timepf = 1/60

type Syncer a = [a] -> a
type Fly a = (Vec a, a)
data Flies a b = Flies {
    _period           :: a,
    _flyNeighbhorhood :: b,
    _times            :: [a],
    _positions        :: [Vec a],
    _size             :: b,
    _matrix           :: [[b]],
    _syncer           :: Syncer a}
makeLenses ''Flies


nonSyncer = randFlies (10,20) 234 5 (\_ _ -> 0) False

fliesSimulatorInstance :: (Ord a,RealFloat a,Integral b,V.Storable b,V.Storable a) => Simulator (Flies a b) a
fliesSimulatorInstance = Simulator simRender simStep simCost mainState
  where
    simCost (Flies p n ts _ s m _) = m &> newGetIxs (V.fromList ts)
                                       &. allWithAll p (fromIntegral n)
                                       & sum & (/ fromIntegral s) & realToFrac
        where allWithAll p s l = l &> (\a -> l &> (\b ->timeDist p a b ^^2) & sum)
                                   & sum & (/ s^^2)

    simRender fs = zipWith (renderFirefly (fs^.period)) (fs^.positions) (fs^.times)
                   & pictures
        where
            renderFirefly :: RealFloat a => a -> Vec a -> a -> Picture
            renderFirefly period pos time = circleSolid 8 & vecTranslate pos
                                                          & color currentColor
                where vecTranslate (Vec (x,y)) = translate (realToFrac x) (realToFrac y)
                      currentColor = let t = realToFrac (time / period)
                                     in makeColor t t t 1


    simStep fs@(Flies per _ ts _ _ matrix syncer) = fs & times .~ newTimes
        where
          newTimes =
               ts &> (+ realToFrac timepf)
                  & zipWith (\indices currT ->
                                 if currT >= per
                                 then currT - per + sync indices (V.fromList ts) syncer
                                 else currT)
                            matrix
            where sync indices ts syncer = indices & newGetIxs ts & syncer

    mainState = randFlies (100,200) 203430 5 (neuralSyncer reallysmallBrain reallysmallWeights) False


type NumNeighbhors = 5

fliesNeuralSimInstance :: (RealFloat a,Ord a,V.Storable a,V.Storable b,Integral b) =>
                              NeuralSim (Flies a b) a _
fliesNeuralSimInstance = NeuralSim fliesSimulatorInstance reallysmallWeights randTrainingState
  where
    numNeighbhors = typeNum (Proxy :: Proxy NumNeighbhors)

    randTrainingState seed weights =
        randFlies (100,200) (seed+1) numNeighbhors (neuralSyncer reallysmallBrain weights) False


newGetIxs vec indices = indices & V.fromList & V.map fromIntegral
                                & V.backpermute vec & V.toList

neuralSyncer :: _ => Brain a ins outs numWeights -> Weights numWeights a -> a -> Syncer a
neuralSyncer (Brain feedForward) weights period inputs = feedForward weights (fromList inputs) & shead & (*(-period))

mySyncer :: (Ord a,Fractional a) => a -> Syncer a
mySyncer period l = l &> ringDiff period & mean
  where ringDiff n t = t + if t > n/2 then -n+t else t
        mean [] = 0
        mean l  = sum l / fromIntegral (length l)


randFlies :: (RealFloat a,Integral b) => (a,a) -> a -> b -> (a -> Syncer a) -> Bool -> Flies a b
randFlies numFliesRange seed numNeighbhors syncer singleLine =
    Flies per numNeighbhors tgen vecs size (closestIs numNeighbhors vecs) (syncer per)
    where
      per = 0.5
      size = floor numFlies
      numFlies = pseudoRand numFliesRange (seed+3)
      xgen | singleLine = iterate (+16) (-numFlies*8)
           | otherwise  = pseudoRands (-500,500) (seed+2)

      ygen | singleLine = repeat 0
           | otherwise  = pseudoRands (-500,500) (seed+1)
      vecs = zip xgen ygen & genericTake size &> Vec
      tgen = pseudoRands (0,per) seed & genericTake size

-- closests :: (Ord a,Num a) =>  Flies a -> Fly a -> Flies a
-- closests (Flies t pos _) (fp,_) = (zip pos t) & sortBy (comparing (\(p,_) -> magVsq (fp-p))) & tail

closestIs :: (Fractional a,Ord a,Integral b,Integral c) => b -> [Vec a] -> [[c]]
closestIs n l = l &> sortDist withIs
    where withIs = zip [0..] l
          sortDist l e = l & sortOn (snd &. distsq e)
                           & tail & genericTake n &> fst


timeDist :: (Ord a, Num a) => a -> a -> a -> a
timeDist n t1 t2 = min absDiff (n - absDiff)
  where absDiff = abs (t1 - t2)

smallBrain :: (V.Storable a,Floating a) => Brain a NumNeighbhors 1 _
smallBrain = biased @7 \> biased

reallysmallBrain :: (V.Storable a,Floating a) => Brain a NumNeighbhors 1 _
reallysmallBrain = biased @3 \> biased

reallysmallWeights :: (Floating a, V.Storable a) => Weights 22 a
reallysmallWeights = mkN -0.7334381641872847 1.0938472660172938 1.0660863550775022 2.4185786519725396 2.3936844141880522 2.1486174159519726 -1.001344026934531 -0.865626178993556 -0.3754357835138557 0.26613213327252705 0.28793641294238603 0.49556430626227277 -1.03561251581661 -0.45290830123844117 -0.38028426554067485 -0.6010359243134789 -0.2677604523204588 9.926473410559172e-2 -1.3232296019931278 1.4373720394232283 -0.36773282412467073 0.1971848559062057


smallerWeights :: (Floating a, V.Storable a) => Weights 50 a
smallerWeights = mkN -0.4337435580482125 -0.42919399471359554 0.10467965697771411 -0.7826851275301971 -1.4738731365757856 -1.3717394603897146 1.0205209623796598 -7.63150527495762e-2 0.49853879700694037 -0.1863553374846672 0.8108713645523271 -0.5662469702468291 0.678878401273423 0.14666987218872052 0.738053600659133 0.4355853964669699 1.032654783495607 -0.6041081502495611 -0.16684915639619902 0.5917097879810564 -0.10093351772163683 1.3238390724292497 -0.3286580715485852 0.5131186060448458 0.20848739175923148 0.8368586566030232 0.5902428570959468 0.46867027857815746 0.13009196425431646 -0.545959867679604 1.0279013601996576 -0.7641235935428594 0.2742636508329137 0.6319367730797587 0.45473571642718547 -0.8966789787897431 0.7287159628284188 1.7865479227949947 0.981600033321298 0.25445760673777573 -0.2917330823538483 0.7733788450249659 -1.9966280196069262 -1.5570535089938105 0.24206267600257075 1.0945765434998562 0.49532270451975746 -6.007645871172687e-2 -9.824540170570273e-2 0.955646114397507


smallWeights :: (Floating a, V.Storable a) => Weights 71 a
smallWeights = mkN 1.160600307116995 -0.13571475384722081 -1.4314294785289934 -0.3388503477584678 -0.6246364092156536 -0.14458904742883 -0.9256042420594497 -1.218093544591952 -0.6127718840782646 9.535792270474097e-2 -0.3959969719713631 0.49117144333997853 0.7203534804751714 1.0569840601173461 0.4654799060381146 -0.20539635501449627 1.0376223820996437 0.7857707138184471 0.8415341557474163 0.10336172524625037 -0.7308693050911141 -3.7197520240257714e-2 -0.5609899497407018 -3.1606586878253184e-2 1.230263526963197 -0.3555959849811655 0.8540410975784392 1.476451673220812 1.178453688238955 -0.46300905360697653 -0.7581162921831381 -0.3263738292272549 0.8311636820327031 -4.4098718458298575e-2 0.16229019002428624 0.4262624014237497 -0.2192167027542436 2.6308535146564322 4.503825109793602e-2 -0.16214051000402346 0.8304766681001372 0.5219279149709288 -9.414116565749395e-2 -0.4493442376969946 0.1866149137435601 0.4516663290089755 -0.421107482950713 0.12005983999012063 -0.716008569362091 0.4267243541101592 0.6291867997570963 0.7181988964683019 -0.12149795448000755 0.26861660785769337 0.18583572820875138 -0.6141151189700773 0.28206401263608205 0.17414888444475163 -0.38643202976867064 -1.181506379194842 -0.559465885408555 -1.3581220677978822 -0.5022764698110858 0.3706416915861801 -0.47414866243570697 0.7795403606860083 5.778396690665384e-2 0.6654683169742823 -0.30983310899415106 1.0094711958661549 -0.8537065437831559


anBrain :: (V.Storable a,Floating a) => Brain a NumNeighbhors 1 _
anBrain = biased @10
             \> biased @10
             \> biased

anWeights :: (Floating a,V.Storable a) => Weights 181 a
anWeights = mkN -50.10672137181783 -190.11795835485697 87.77424992505952 140.36760021730703 -38.40845524451541 -10.349160048617676 -170.8539924549857 20.097998074657767 -1.5590419113978413 27.622130248840364 4.574338920501447 -67.1509156854761 -111.6217152683958 -76.96836822994709 23.545979563867192 -81.57839178721454 5.741631390533172 -171.70258775093964 -36.954748117799525 47.73442368694151 36.275634080045094 27.948661667742797 143.37186222162563 -79.28046382142503 -18.557058988543602 198.9178490775094 51.41891786458177 44.81345993467556 146.8233777938023 230.63787827498155 -64.22001229469569 40.333110761917894 102.08194319085098 37.91015976064787 -160.25039002738754 12.038769550259744 141.0119538523443 72.58456296293235 -108.228855401028 39.49039191453832 11.716089899569468 -144.86210438302376 -50.9131774270374 104.209469479002 23.794292971496226 -63.49169639107838 -49.243391744605475 15.914178360095207 153.87832721695406 9.199602346388446 67.53072139196809 24.813372456980844 36.80462386208981 56.48843135699971 167.0909278796246 12.619176935300118 -19.421284868503633 -16.12164201996005 -100.93715547179414 15.68107838162976 -90.3515513641184 -129.3987218673151 -231.91850752263517 74.11605703224384 -42.458085671728156 95.1491281126367 -47.32613887390767 75.83944709027787 -27.615293646277642 -159.63917563539852 -21.54663119441588 29.571757806403795 -33.12745096100309 -25.795890616318914 122.55401503837018 -174.60585776741425 127.51276565455618 31.587106224895848 54.48052695816838 63.672678314082816 -103.1714780124627 38.62071776456425 16.56392929997517 -82.73752743525907 -138.6581850491471 -31.295319360957336 237.86493059631562 2.8062299303764178 -149.84388217170994 28.87271713434731 41.75817116040909 164.34401425100273 -128.8846427444596 69.93065401422785 -77.57161963590156 82.39114389237747 170.5050273087764 22.311362024804694 165.1475790531809 71.01481586148273 12.655389577501069 -45.50886044515251 -19.72357548319866 -41.94874757605933 -81.76864896338077 250.32744527324428 134.40696848758898 185.98891346369632 180.98125806348187 216.0045263921797 46.79741122208041 -62.13096054271301 82.11786561918319 -128.84957736820252 -5.394140196852533 -29.339037759272685 -176.46518863592667 -201.42201839332103 70.62276670405765 4.867562167519367 -71.55558220687182 83.84700583552787 7.590755667442593 -3.4534578108532514 107.1396634983044 119.62033606121565 374.84626445263297 81.27603649765626 159.34315979569098 185.88179912617522 230.2736264814839 -5.642380512560607 61.115176147884966 8.51776942015752 27.515832424888828 -45.29275783495686 3.923308956148574 45.23295261166257 -3.5304844897843424 276.862785530697 66.16831908139659 186.30796206832568 -50.9068987561826 158.20375515342573 -96.83675885849395 -104.46830070350734 -41.82054402039998 -185.97619901497362 36.32092580363576 175.55978785119345 104.29344901148431 -41.252318883195954 116.63814568340962 102.71002122403911 5.264209246577963 97.48963328783037 7.494360659186569 250.17813511249466 208.34349171791303 50.73921973227375 59.59490885842763 120.40964630352312 -28.330615026567216 -151.0696290500934 156.51579855972227 -44.802790200226994 -109.40569908738257 -83.62428792165383 11.20667317441206 12.74069796895759 -94.85769791198581 203.7142876382806 -16.72940619733592 31.930164340453842 72.41202110313401 122.33691830168146 -102.68653845468799 -234.61629761223625 65.70143266779826 203.06007334627196 82.42389955218302


startBrain :: (V.Storable a,Floating a) => Brain a NumNeighbhors 1 _
startBrain = biased @10
             \> biased @10
             \> biased @5
             \> biased

newBrain :: (V.Storable a, Floating a) => Brain a NumNeighbhors 1 _
newBrain = shared (Proxy :: Proxy NumNeighbhors) inputizer
           \> biased @10
           \> biased @5
           \> biased
  where inputizer = biased @3 @1
                    \> biased @2

newBeast :: (Floating a,V.Storable a) => Weights 231 a
newBeast = mkN -0.7119979468686701 3.3188048782691014e-3 0.42947692141920846 0.10797592716312508 2.248130576009141 0.5666580875903421 0.27049757330130847 0.311081157171721 0.894964983301081 -0.662578892365693 -0.7127630933596525 0.5671665605278435 -1.9043122530326948 -0.1911211383641192 0.33846301722945155 -0.28874896123944543 4.509850466407818e-2 1.3339537163543576 -4.407836804280136e-2 0.8141448919732931 -0.38368142005844713 8.844248235707167e-2 1.0429481718799778 -0.579319342271716 0.22745263445824354 -2.4790630311951993e-3 0.281125754445245 -0.40269585912226596 6.43958320939148e-2 0.7434658188793474 0.25359664653912184 -0.5148711951501779 -0.4287834212211307 -0.5536224606658064 -0.6511202420146053 -1.2287129008493296 0.23245780536335386 -0.27068762699220195 -0.6044401071893842 1.0968519355406177 0.970572386699542 0.9462736032888405 0.35589975265451024 -0.5054740745101647 0.10909410957236858 -1.6164729785770125e-2 -6.106204893204766e-2 -0.5701935683224786 0.41174467824325744 0.4603781071471426 -2.015678300264454e-2 0.44769219667340326 -4.9148290803708305e-3 0.9856053176420895 -0.5509892011104924 -0.1782063928054389 0.34430724086911463 0.7403784654161429 0.3403877019100409 0.4894354744996819 -0.7119979468686701 3.3188048782691014e-3 0.42947692141920846 0.10797592716312508 2.248130576009141 0.5666580875903421 0.27049757330130847 0.311081157171721 0.894964983301081 -0.662578892365693 -0.7127630933596525 0.5671665605278435 -1.9043122530326948 -0.1911211383641192 0.33846301722945155 -0.28874896123944543 4.509850466407818e-2 1.3339537163543576 -4.407836804280136e-2 0.8141448919732931 -0.38368142005844713 8.844248235707167e-2 1.0429481718799778 -0.579319342271716 0.22745263445824354 -2.4790630311951993e-3 0.281125754445245 -0.40269585912226596 6.43958320939148e-2 0.7434658188793474 0.25359664653912184 -0.5148711951501779 -0.4287834212211307 -0.5536224606658064 -0.6511202420146053 -1.2287129008493296 0.23245780536335386 -0.27068762699220195 -0.6044401071893842 1.0968519355406177 0.970572386699542 0.9462736032888405 0.35589975265451024 -0.5054740745101647 0.10909410957236858 -1.6164729785770125e-2 -6.106204893204766e-2 -0.5701935683224786 0.41174467824325744 0.4603781071471426 -2.015678300264454e-2 0.44769219667340326 -4.9148290803708305e-3 0.9856053176420895 -0.5509892011104924 -0.1782063928054389 0.34430724086911463 0.7403784654161429 0.3403877019100409 0.4894354744996819 -0.536783069970956 -0.7065405352449489 0.6970319850616875 -4.802875169681765e-2 0.7855297248090388 0.45486940586073643 0.5007756638731917 0.6697315375254035 0.5310820436515253 -6.412635590811283e-2 -0.558679925782287 0.6133616712245031 -0.3181333918833204 -0.6319053597192457 0.41729663504515696 -0.11776805904976953 2.3713740929128393e-2 0.4806468603177178 0.6417305074552386 0.764870816824788 -7.130456778531266e-2 0.5809516110337739 0.9954486110896397 -0.5810990350774544 0.2500448127303299 -1.9055317334964683e-2 -0.6829987805950539 -0.3493047966031502 -0.2079263217489558 0.7836167808809289 0.720084406974982 9.272705449358094e-2 -0.24394594960714508 -0.5407729901916709 -0.7969664658762311 -0.7588647002377801 0.14633753747487155 0.7998223152262148 -0.23527278262350268 0.9537910086098967 0.7523260012278286 0.8956040454958565 0.33603641533761286 -0.625454205866556 -3.922958303293007e-2 0.7354980405493061 -0.18184477524122417 -0.6672332994191916 0.46807329697506006 0.3792813036039256 -0.7119979468686701 3.3188048782691014e-3 0.42947692141920846 0.10797592716312508 2.248130576009141 0.5666580875903421 0.27049757330130847 0.311081157171721 0.894964983301081 -0.662578892365693 -0.7127630933596525 0.5671665605278435 -1.9043122530326948 -0.1911211383641192 0.33846301722945155 -0.28874896123944543 4.509850466407818e-2 1.3339537163543576 -4.407836804280136e-2 0.8141448919732931 -0.38368142005844713 8.844248235707167e-2 1.0429481718799778 -0.579319342271716 0.22745263445824354 -2.4790630311951993e-3 0.281125754445245 -0.40269585912226596 6.43958320939148e-2 0.7434658188793474 0.25359664653912184 -0.5148711951501779 -0.4287834212211307 -0.5536224606658064 -0.6511202420146053 -1.2287129008493296 0.23245780536335386 -0.27068762699220195 -0.6044401071893842 1.0968519355406177 0.970572386699542 0.9462736032888405 0.35589975265451024 -0.5054740745101647 0.10909410957236858 -1.6164729785770125e-2 -6.106204893204766e-2 -0.5701935683224786 0.41174467824325744 0.4603781071471426 -2.015678300264454e-2 0.44769219667340326 -4.9148290803708305e-3 0.9856053176420895 -0.5509892011104924 -0.7119979468686701 3.3188048782691014e-3 0.42947692141920846 0.10797592716312508 2.248130576009141 0.5666580875903421

neuralWeight :: (Floating a,V.Storable a) => Weights 185 a
neuralWeight = mkN 4.3565862795036804e-2 0.32113123268151145 0.29884396607857994 -0.6928238867383609 -0.3054392167854066 0.6815192078591398 0.3937355842725465 0.5752523327435174 0.47510424973201515 0.8026954524550349 -0.3439044881979492 0.7256226309058634 -0.4976430253309012 -0.14801082458327042 -1.061715322626214 0.9618862279997309 0.20712903794864035 0.6505583912498892 -0.22417131917983568 5.735229677272172e-3 1.8789869541639956e-2 0.2318702528047037 -0.6325696477409577 0.9362366074638788 0.1533824213087278 -5.8230807775073844e-3 -0.1689855643898945 3.6142818320882945e-2 0.3425462934113485 -0.8222974493035397 -0.42595225899107936 0.9846834938227191 0.2980650519625498 4.875342781044732e-2 0.9727636424334216 0.641105082658658 0.6495731391042291 -0.9238819862466906 -0.6422420822563281 0.2684971932678603 -0.9553226688823041 -0.9318316809413428 1.56335961276816e-2 -0.23754166329663812 -0.38003050372621805 -0.6637718272361929 -0.3355858741327037 0.9528755282068669 0.7044630167819277 -0.6065086364239718 0.24649153876841767 0.9743135283279561 -0.2847889089685334 0.8615887747382116 4.15614380868069e-2 -9.884340765092929e-2 0.7189575576726939 2.169393494872003e-2 0.54708256765709 0.5318385360613611 0.3990948103456267 -0.48881457832939157 0.7173195903990719 8.775617164537203e-2 0.4074607820513332 0.2908482673466296 -6.003107302787043e-2 -0.6498185153652783 -1.974659964571062e-2 -0.32347914063437505 -0.20289086743142107 0.1245784886792059 0.6105978867937479 -0.1497579303811458 0.6772597578270622 -0.3452312447795911 0.48572238852560273 -0.5507834758153887 1.0421496447779328 0.7905143084822553 6.0063415252372444e-2 0.11744981986091534 -0.25270721772427074 -0.3717781132837574 0.8801218381951306 -0.9179513922992935 -0.9017208950464233 2.2236641159520013e-2 1.2897531744607154e-2 -2.221149415415345e-3 -0.34042642163384007 0.6575904341665614 -0.5380478217176522 0.48329298458713443 -0.8569135370839488 -0.7941656137057541 3.946091289633834e-2 0.3186018680990951 -0.6504086786170422 -0.8204223531974292 0.7826026479289002 -0.40809790331098644 -1.1535868205104927e-2 0.8766013031088741 -0.4609166160715143 4.5559015042507436e-2 -0.2418913196807136 0.2418565599731257 -0.661375643337908 0.4508506422837244 0.9479453644879018 0.32830238275084966 -0.618571853120976 0.48263622990559596 1.4013130441158013e-2 -0.741452192260504 0.9473411927314804 9.273867876712454e-2 -0.6811247757143074 -0.2779745658918509 -0.46242722672374575 7.574716623313339e-2 0.7284104040670052 -0.9085036097948188 0.9017136504387852 0.9645596300810835 -0.48119858762609513 0.1171620335090943 -5.7492223950525626e-2 -0.9883977828025404 0.7104730236994033 -0.7674953621094346 0.6872276744423054 0.26103107228925587 -0.4162094304330389 -0.2560667779155493 -0.11369015176007388 0.20049588979781863 -0.14397375852379124 0.45321865249071164 2.122062186379692e-2 0.20303384856497292 0.5384301847712848 -7.568207567196852e-2 0.8060588682832558 0.2106666860329889 -0.7173070107279811 -0.11070810768693655 0.17035611345903023 -9.312019516476508e-2 -0.4071906371155327 0.12153074666081498 0.9167813051999162 -0.9591426632002606 0.2648810252316579 -4.5259028383059154e-2 -0.6286492016652039 2.2116962465654175e-2 -0.38560852719578953 -0.5536561499983399 -0.6651893890025112 -0.8428911783673207 -0.11308488832948549 0.5108589208680985 4.690467323591255e-2 -0.6699404577863695 1.0597129280083182 -0.46270750312330927 0.9841480822837791 1.0011126551266136 -0.7534615112142545 2.5362184541368363e-2 2.398801489174075e-2 0.9284762723767775 0.11241083867553908 0.6426641086050783 0.5436820003180975 0.2042877512342095 0.9274547583394764 -0.3346278020380683 -0.5641203909371155 0.43864218035401104 -9.061068914692182e-2 0.9484447762195488 0.27820304502053167
